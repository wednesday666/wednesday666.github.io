<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on 随笔记</title>
    <link>https://weekthree.github.io/tags/redis/</link>
    <description>Recent content in redis on 随笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 09 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://weekthree.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis 6.0新特性</title>
      <link>https://weekthree.github.io/p/redis-6.0%E6%96%B0%E7%89%B9%E6%80%A7/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://weekthree.github.io/p/redis-6.0%E6%96%B0%E7%89%B9%E6%80%A7/</guid>
      <description>IO 多线程 Redis 一直被大家熟知的就是它的单线程架构，虽然有些命令操作可以用后台线程或子进程执行（比如数据删除、快照生成、AOF 重写），但是，从网络 IO 处理到实际的读写命令处理，都是由单个线程完成的。
在 6.0 版本之前，Redis采用了采用了多路 I/O 复用技术，这里的多路指的是多个 socket 网络连接，复用指的是复用同一个线程。通过多路 I/O 复用技术在同一个线程中处理多个 I/O 请求，尽量减少网络 I/O 的消耗，提升使用效率。 基于多路复用的Redis高性能IO模型 但随着网络硬件的性能提升，Redis的性能瓶颈有时会出现在网络 IO 的处理上，单个主线程处理网络请求的速度跟不上底层网络硬件的速度。
在 6.0 版本中，Redis把请求网络包读写和解析也从主线程中剥离出来了。
Redis 6.0 采用多个 IO 线程来处理网络请求，提高网络请求处理的并行度。但是对于读写命令，仍然使用单线程来处理。
这样实现有两个好处：
 通过多个IO线程并行处理网络操作，解决网络处理瓶颈提升实例的整体处理性能。 读写命令继续使用单线程处理，可以避免上下文切换和不必要的线程之间引起的资源竞争，线程模型更简单。   处理流程 主线程和多 IO 线程的协作主要分成以下几个阶段：
 服务端和客户端建立 Socket 连接，并分配处理线程。 IO 线程读取并解析请求。 主线程执行请求操作。 IO线程回写 Socket 和主线程清空全局队列  在第2、4阶段，由于加入了 IO 多线程，多个 IO 线程并行处理读取与解析请求，以及回写 Socket 的操作都会很快。因此可以加速网络处理，进而提升实例的吞吐量。 IO多线程处理流程
开启多线程 默认情况下，多线程是关闭的。如果需要启动，要在 redis.conf 进行以下配置。
#启用多线程 io-threads-do-reads yes #设置线程个数 io-threads 6 需要注意的是，线程个数要小于实例所在的 CPU 核个数。对于 8 核 CPU 的机器，官方建议配置 6 个 IO 线程。 权限控制 在 Redis 6.</description>
    </item>
    
    <item>
      <title>基于Redis GEO实现的LBS功能</title>
      <link>https://weekthree.github.io/p/%E5%9F%BA%E4%BA%8Eredis-geo%E5%AE%9E%E7%8E%B0%E7%9A%84lbs%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://weekthree.github.io/p/%E5%9F%BA%E4%BA%8Eredis-geo%E5%AE%9E%E7%8E%B0%E7%9A%84lbs%E5%8A%9F%E8%83%BD/</guid>
      <description>介绍 Redis除了5大基本数据类型：String、List、Hash、Set和Sorted Set。还提供了3种拓展数据类型，分别是Bitmap、HyperLogLog和GEO。
GEO是Redis 3.2 版本中新增的专门面向LBS应用的一种数据类型。使用它我们可以非常方便的实现一些**基于位置信息服务(Location-Based Service,LBS)**的应用。例如打车软件获得离用户最近的车辆信息。或者根据用户点阅的物件展示周边距离最近的物件。利用GEO和经纬度信息可以很简单的获取到数据。
如何使用 数据存储Redis 使用前，需要将经纬度数据准备好，使用以下命令存储到Redis中。
GEOADD key longitude latitude member [longitude latitude member ...] 例如，物件ID是1001的经纬度信息为114.143701,22.408597
GEOADD data:locations 114.143701 22.408597 1001 将所有数据插入到Redis后，我们就可以开始获取想要的数据了。
获取范围内的数据 根据经纬度 例如，我们想根据经纬度获得离它5km范围最近的三笔数据，按距离由近到远排序。
&amp;gt; GEORADIUS data:locations 114.152801 22.411597 5 km ASC COUNT 3 1003 1001 1002 返回的数据就是按直线距离排序好的成员ID。其中参数5 km就是限制距离范围。支持多种单位长度
 m表中单位为米 km表示千米 mi表示英里 ft表示为英尺  根据已有成员 也可以直接根据已有成员的经纬度获得数据
&amp;gt; GEORADIUSBYMEMBER data:locations 1001 5 km ASC COUNT 3 WITHDIST WITHCOORD 1001 0.0000 114.14370328187942505 22.40859655827627961 1002 1.1170 114.14270013570785522 22.</description>
    </item>
    
  </channel>
</rss>
